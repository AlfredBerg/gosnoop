// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package file

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type fileEvent struct {
	Pid     uint32
	Comm    [256]uint8
	SysCall [256]uint8
	Path    [256]uint8
}

// loadFile returns the embedded CollectionSpec for file.
func loadFile() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FileBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load file: %w", err)
	}

	return spec, err
}

// loadFileObjects loads file and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*fileObjects
//	*filePrograms
//	*fileMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFileObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFile()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// fileSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fileSpecs struct {
	fileProgramSpecs
	fileMapSpecs
}

// fileSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fileProgramSpecs struct {
	TraceCreat   *ebpf.ProgramSpec `ebpf:"trace_creat"`
	TraceLstat   *ebpf.ProgramSpec `ebpf:"trace_lstat"`
	TraceOpen    *ebpf.ProgramSpec `ebpf:"trace_open"`
	TraceOpenat  *ebpf.ProgramSpec `ebpf:"trace_openat"`
	TraceOpenat2 *ebpf.ProgramSpec `ebpf:"trace_openat2"`
	TraceStat    *ebpf.ProgramSpec `ebpf:"trace_stat"`
}

// fileMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type fileMapSpecs struct {
	RingBuffer *ebpf.MapSpec `ebpf:"ring_buffer"`
}

// fileObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type fileObjects struct {
	filePrograms
	fileMaps
}

func (o *fileObjects) Close() error {
	return _FileClose(
		&o.filePrograms,
		&o.fileMaps,
	)
}

// fileMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type fileMaps struct {
	RingBuffer *ebpf.Map `ebpf:"ring_buffer"`
}

func (m *fileMaps) Close() error {
	return _FileClose(
		m.RingBuffer,
	)
}

// filePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFileObjects or ebpf.CollectionSpec.LoadAndAssign.
type filePrograms struct {
	TraceCreat   *ebpf.Program `ebpf:"trace_creat"`
	TraceLstat   *ebpf.Program `ebpf:"trace_lstat"`
	TraceOpen    *ebpf.Program `ebpf:"trace_open"`
	TraceOpenat  *ebpf.Program `ebpf:"trace_openat"`
	TraceOpenat2 *ebpf.Program `ebpf:"trace_openat2"`
	TraceStat    *ebpf.Program `ebpf:"trace_stat"`
}

func (p *filePrograms) Close() error {
	return _FileClose(
		p.TraceCreat,
		p.TraceLstat,
		p.TraceOpen,
		p.TraceOpenat,
		p.TraceOpenat2,
		p.TraceStat,
	)
}

func _FileClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed file_bpfel.o
var _FileBytes []byte
